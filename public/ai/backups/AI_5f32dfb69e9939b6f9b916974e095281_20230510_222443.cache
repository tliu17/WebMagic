To display a list of properties, you can create a function that retrieves the property data from the database and then displays it in a user-friendly format. Here's an example of how you can do this using PHP and SQL:

```php
function getProperties() {
    global $DB;

    // Prepare the SQL query to fetch property data
    $sql = "SELECT * FROM real_estates";
    $stmt = $DB->prepare($sql);

    // Execute the query
    $stmt->execute();

    // Fetch the property data as an associative array
    $properties = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $properties;
}

// Call the function to get the property data
$properties = getProperties();

// Display the property data in a user-friendly format
echo "<table>";
echo "<tr><th>Title</th><th>Description</th><th>Price</th><th>Image</th></tr>";

foreach ($properties as $property) {
    echo "<tr>";
    echo "<td>" . htmlspecialchars($property['title']) . "</td>";
    echo "<td>" . htmlspecialchars($property['description']) . "</td>";
    echo "<td>" . htmlspecialchars($property['price']) . " " . htmlspecialchars($property['currency_code']) . "</td>";
    echo "<td><img src='" . htmlspecialchars($property['image_url']) . "' alt='" . htmlspecialchars($property['title']) . "' width='100'></td>";
    echo "</tr>";
}

echo "</table>";
```

This code defines a `getProperties` function that fetches property data from the `real_estates` table in the database. The function then returns the property data as an associative array.

The code then calls the `getProperties` function to get the property data and displays it in an HTML table. The table includes columns for the property title, description, price, and image. The property data is sanitized using `htmlspecialchars` to prevent potential security issues, such as cross-site scripting (XSS) attacks.